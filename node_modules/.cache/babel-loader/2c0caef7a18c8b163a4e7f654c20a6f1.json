{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Emmanuel\\\\Documents\\\\SCHOOL PROJECTS\\\\WEB DEVELOPMENT\\\\webdev core projects\\\\REACT PROJECTS\\\\github_finder_app\\\\src\\\\components\\\\users\\\\Users.js\";\nimport React, { Fragment } from \"react\";\nimport UserItem from \"./UserItem\";\nimport Spinner from \"../layout/Spinner\";\nimport PropTypes from \"prop-types\";\n\nconst Users = ({\n  users,\n  loading,\n  errorMessage\n}) => {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: loading && /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 32\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 10\n  }, this);\n};\n\n_c = Users;\nUsers.propTypes = {\n  users: PropTypes.array.isRequired,\n  loading: PropTypes.bool.isRequired\n};\nconst userGridStyle = {\n  display: \"grid\",\n  gridTemplateColumns: \"repeat(3, 1fr)\",\n  gridGap: \"1rem\"\n};\nexport default Users;\n/*  if (loading) {\r\n    return <Spinner />;\r\n  } else {\r\n    return (\r\n      <Fragment>\r\n        <div style={userGridStyle}>\r\n          {users.map((user) => (\r\n            <UserItem key={user.id} user={user} />\r\n          ))}\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  } */\n\nvar _c;\n\n$RefreshReg$(_c, \"Users\");","map":{"version":3,"sources":["C:/Users/Emmanuel/Documents/SCHOOL PROJECTS/WEB DEVELOPMENT/webdev core projects/REACT PROJECTS/github_finder_app/src/components/users/Users.js"],"names":["React","Fragment","UserItem","Spinner","PropTypes","Users","users","loading","errorMessage","propTypes","array","isRequired","bool","userGridStyle","display","gridTemplateColumns","gridGap"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,OAAT;AAAkBC,EAAAA;AAAlB,CAAD,KAAsC;AAClD,sBAAO,QAAC,QAAD;AAAA,cAAWD,OAAO,iBAAI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAtB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAFD;;KAAMF,K;AAINA,KAAK,CAACI,SAAN,GAAkB;AAChBH,EAAAA,KAAK,EAAEF,SAAS,CAACM,KAAV,CAAgBC,UADP;AAEhBJ,EAAAA,OAAO,EAAEH,SAAS,CAACQ,IAAV,CAAeD;AAFR,CAAlB;AAKA,MAAME,aAAa,GAAG;AACpBC,EAAAA,OAAO,EAAE,MADW;AAEpBC,EAAAA,mBAAmB,EAAE,gBAFD;AAGpBC,EAAAA,OAAO,EAAE;AAHW,CAAtB;AAMA,eAAeX,KAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Fragment } from \"react\";\r\nimport UserItem from \"./UserItem\";\r\nimport Spinner from \"../layout/Spinner\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Users = ({ users, loading, errorMessage }) => {\r\n  return <Fragment>{loading && <Spinner />}</Fragment>;\r\n};\r\n\r\nUsers.propTypes = {\r\n  users: PropTypes.array.isRequired,\r\n  loading: PropTypes.bool.isRequired,\r\n};\r\n\r\nconst userGridStyle = {\r\n  display: \"grid\",\r\n  gridTemplateColumns: \"repeat(3, 1fr)\",\r\n  gridGap: \"1rem\",\r\n};\r\n\r\nexport default Users;\r\n\r\n/*  if (loading) {\r\n    return <Spinner />;\r\n  } else {\r\n    return (\r\n      <Fragment>\r\n        <div style={userGridStyle}>\r\n          {users.map((user) => (\r\n            <UserItem key={user.id} user={user} />\r\n          ))}\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  } */\r\n"]},"metadata":{},"sourceType":"module"}